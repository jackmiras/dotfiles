################################################################################
# Pure PHP snippets                                                            #
################################################################################

snippet this "Access property or functions in the context of a class or function" i
$this->$0
endsnippet

snippet this= "Access property in the context of a class and attributes some value to the property"
$this->$1 = $0;
endsnippet

snippet construct "Public function that represents the constructor of a class"
public function __construct($1)
{
    ${0:# code...}
}
endsnippet

snippet closure "Anonymous function with no parameters" i
function () {
    ${0:# code...}
}
endsnippet

snippet closure1 "Anonymous function with one parameter" i
function (${2:typeHint} $${3:param}) {
    ${0:# code...}
}
endsnippet

snippet closure2 "Anonymous function with two parameter" i
function (${2:typeHint} $${3:param1}, ${4:typeHint} $${5:param2}) {
    ${0:# code...}
}
endsnippet

snippet pubf "Public function with no parameters" i
public function ${1:name}(): ${2:void}
{
    ${0:# code...}
}
endsnippet

snippet pubf1 "Public function with one parameter"
public function ${1:name}(${2:typeHint} $${3:param}): ${4:void}
{
    ${0:# code...}
}
endsnippet

snippet pubf2 "Public function with two parameter"
public function ${1:name}(${2:typeHint} $${3:param1}, ${4:typeHint} $${5:param2}): ${6:void}
{
    ${0:# code...}
}
endsnippet

snippet pubsf "Public static function with no parameters" i
public static function ${1:name}(): ${2:void}
{
    ${0:# code...}
}
endsnippet

snippet pubsf1 "Public static function with one parameter"
public static function ${1:name}(${2:typeHint} $${3:param}): ${4: void}
{
    ${0:# code...}
}
endsnippet

snippet pubsf2 "Public static function with two parameter"
public static function ${1:name}(${2:typeHint} $${3:param1}, ${4:typeHint} $${5:param2}): ${6:void}
{
    ${0:# code...}
}
endsnippet

snippet prif "Private function with no parameters"
private function ${1:name}(): ${2:void}
{
    ${0:# code...}
}
endsnippet

snippet prif1 "Private function with one parameter"
private function ${1:name}(${2:typeHint} $${3:param}): ${4:void}
{
    ${0:# code...}
}
endsnippet

snippet prif2 "Private function with two parameters"
private function ${1:name}(${2:typeHint} $${3:param1}, ${4:typeHint} $${5:param2}): ${6:void}
{
    ${0:# code...}
}
endsnippet

snippet prof "Protected function with no parameters"
protected function ${1:name}(): ${2:void}
{
    ${0:# code...}
}
endsnippet

snippet prof1 "Protected function with one parameter"
protected function ${1:name}(${2:typeHint} $${3:param}): ${4:void}
{
    ${0:# code...}
}
endsnippet

snippet prof2 "Protected function with two parameters"
protected function ${1:name}(${2:typeHint} $${3:param1}, ${4:typeHint} $${5:param2}): ${6:void}
{
    ${0:# code...}
}
endsnippet

snippet pubfi "Interface public function with no parameter" i
public function ${1:name}(): ${2:void};
endsnippet

snippet pubfi1 "Interface public function with one parameter"
public function ${1:name}(${2:typeHint} $${3:param}): ${4:void};
endsnippet

snippet pubfi2 "Interface public function with two parameters"
public function ${1:name}(${2:typeHint} $${3:param}, ${3:typeHint} $${4:param}): ${5:void};
endsnippet

snippet pubfi3 "Interface public function with three parameters"
public function ${1:name}(${2:typeHint} $${3:param}, ${3:typeHint} $${4:param}, ${4:typeHint} $${5:param}): ${6:void};
endsnippet

snippet try "Try catch block"
try {
    $3
} catch (${1:Exception} $${2:exception}) {
    $0
}
endsnippet

snippet catch "Catch exception block"
catch (${1:Exception} $${2:exception}) {
    $0;
}
endsnippet

snippet if "If statement with one condition"
if ($$1) {
    ${0:# code...}
}
endsnippet

snippet ifnull "If statement is null"
if ($$1 === null) {
    ${0:# code...}
}
endsnippet

snippet ifnot "If statement is not ${2:comparator}"
if ($$1 !== ${2:comparator}) {
    ${0:# code...}
}
endsnippet

snippet elseif "Elseif statement with on condition"
elseif ($1) {
    ${0:# code...}
}
endsnippet

snippet else "Else statement with any condition"
else {
    ${0:# code...}
}
endsnippet

snippet switch1 "Switch statement with one case condition"
switch (${1:param}) {
    case ${2:condition}:
        ${3:# code...}
        break;
    default:
        ${0:# code...}
        break;
}
endsnippet

snippet switch2 "Switch statement with two case condition"
switch (${1:param}) {
    case ${2:firstCondition}:
        ${3:# code...}
        break;
    case ${4:secondCondition}:
        ${5:# code...}
        break;
    default:
        ${0:# code...}
        break;
}
endsnippet

snippet switch3 "Switch statement with three case condition"
switch (${1:param}) {
    case ${2:firstCondition}:
        ${3:# code...}
        break;
    case ${4:secondCondition}:
        ${5:# code...}
        break;
    case ${6:secondCondition}:
        ${7:# code...}
        break;
    default:
        ${0:# code...}
        break;
}
endsnippet

snippet fori "For loop with index"
for ($${1:index} = 0; $$1 < ${2:limit}; $$1++) {
    ${0:# code...}
}
endsnippet

snippet foric "For loop with index and 'count()' function to define limit"
for ($${1:index} = 0; $$1 < count($$2); $$1++) {
    ${0:# code...}
}
endsnippet

snippet fore "Foreach loop"
foreach ($${1:array} as $${2:value}) {
    ${0:# code...}
}
endsnippet

snippet forek "Foreach loop with key value params"
foreach ($${1:array} as $${2:key} => $${3:value}) {
    ${0:# code...}
}
endsnippet

snippet filter "Array filter function"
$${1:result} = array_filter($${2:array}, function ($${3:param}) {
    return $0;
});
endsnippet

snippet map "Array map function"
$${1:result} = array_map(function ($${2:param}) {
    return $0;
}, $${3:array});
endsnippet

snippet reduce "Array reduce function"
$${1:result} = array_reduce($${2:array}, function ($${3:acc}, $${4:next}) {
    ${0:# code...};
    return $$3;
}, []);
endsnippet

snippet count "Count function"
$amount = count($0);
endsnippet

snippet todo "This is a TODO reminder"
//TODO: [`!v strftime("%c")`] ${1:desc}
endsnippet

snippet fixme "This is a FIXME reminder"
//FIXME: [`!v strftime("%c")`] ${1:desc}
endsnippet

snippet duplicated "This is a DUPLICATED reminder"
//DUPLICATED: [`!v strftime("%c")`] ${1:desc}
endsnippet

snippet note "This is a reminder"
//NOTE: [`!v strftime("%c")`] ${1:desc}
endsnippet

snippet remove "This is a remove note"
//REMOVE: [`!v strftime("%c")`] ${1:desc}
endsnippet

snippet ret "Return statement"
return $0;
endsnippet

snippet const "This is a structure to create constants"
public const ${1:CONSTANT_NAME} = '${0:constant-value}';
endsnippet

snippet slice "array_slice function" i
array_slice($${1:array}, ${2:offset}, ${0:length});
endsnippet

################################################################################
# Laravel snippets                                                             #
################################################################################

snippet prefix "Route prefix method"
Route::prefix('${1:prefix}')->group(function (): void {
    ${0:# code...}
});
endsnippet

snippet get "Get router method"
Route::get('${1:path}', '${2:action}');
endsnippet

snippet post "Post router method"
Route::post('${1:path}', '${2:action}');
endsnippet

snippet put "Put router method"
Route::put('${1:path}', '${2:action}');
endsnippet

snippet patch "Patch router method"
Route::patch('${1:path}', '${2:action}');
endsnippet

snippet delete "Delete router method"
Route::delete('${1:path}', '${2:action}');
endsnippet

snippet options "Options router method"
Route::options('${1:path}', '${2:action}');
endsnippet

snippet index "Public function that handle GET HTTP requests"
public function index(): Response
{
    ${0:# code...}
}
endsnippet

snippet show "Public function that handle GET HTTP request"
public function show(Request $request): Response
{
    ${0:# code...}
}
endsnippet

snippet create "Public function that should return a view to create a new resource"
public function create(Request $request): View
{
    ${0:# code...}
}
endsnippet

snippet store "Public function that should handle POST HTTP request"
public function store(Request $request): Response
{
    ${0:# code...}
}
endsnippet

snippet edit "Public function that should return a view to edit an existing resource"
public function edit(Request $request): View
{
    ${0:# code...}
}
endsnippet

snippet update "Public function that should handle PUT and PATCH HTTP requests"
public function update(Request $request): Response
{
    ${0:# code...}
}
endsnippet

snippet destroy "Public function that should handle DELETE HTTP request"
public function destroy(Request $request): Response
{
    ${0:# code...}
}
endsnippet

snippet trans "" i
trans('${0:Resource lang id...}')
endsnippet

snippet response "Response object from Laravel" i
$response->$0;
endsnippet

snippet request "Request object from Laravel" i
$request->$0;
endsnippet

snippet resp "Response for a controller action"
return response(${1:$body}, ${2:status});
endsnippet

snippet respj "Response with a json for a controller action"
return response()->json(${1:$body}, ${2:status});
endsnippet

snippet view "Laravel view helper"
view('$0')
endsnippet

snippet array_first "Laravel array_first helper"
array_first($0);
endsnippet

snippet make "Retrieve value from Laravel container" i
${1:$this->app}->make($0);
endsnippet

snippet makeo "Retrieve value from Laravel container an set to an object"
$${1:object} = ${1:$this->app}->make($0);
endsnippet

snippet singleton "Register a value into Laravel container"
${1:$this->app}->singleton(${2:key}, function (${3:$app}) {
    return $0;
});
endsnippet

snippet class "A standard class"
<?php

namespace App;$2

class ${3:ClassName}
{
    ${0:# code...}
}
endsnippet

snippet interface "A standard interface"
<?php

namespace ${1:Path\To\This\Interface};$2

interface ${3:InterfaceName}
{
    ${0:# code...}
}
endsnippet

snippet trait "A standard trait"
<?php

namespace ${1:App\TraitPath};$2

trait ${3:TraitName}
{
    ${0:# code...}
}
endsnippet

snippet fcreate "Factory function that create any amount of objects"
$${1:object} = factory(${2:Model}::class, ${3:amount})->create(${4:attributes});
endsnippet

snippet fmake "Factory function that make any amount of objects"
$${1:object} = factory(${2:Model}::class, ${3:amount})->make(${4:attributes});
endsnippet

snippet mutator "Defining A Mutator"
public function set${1:PropertyName}Attribute(${2:typeHint} $${3:value}): void
{
    ${0:# code...}
}
endsnippet

snippet accessor "Defining A Accessor"
public function get${1:PropertyName}Attribute(string $value): string
{
    return $0;
}
endsnippet

snippet dd "Debug and stop function"
dd($0);
endsnippet

snippet ddj "Debug and stop function that prints value as json"
dd(json_encode($0));
endsnippet

snippet dds "Debug and stop function that prints value as string"
dd('$0');
endsnippet

snippet dp "Debug function"
dump($0);
endsnippet

snippet dpj "Debug function that prints value as json"
dump(json_encode($0));
endsnippet

snippet dps "Debug function that prints value as string"
dump('$0');
endsnippet

snippet table "Migration table object to describe columns"
$table->$1('$0');
endsnippet

snippet foreign "Migratrion table object to describe foreign key"
$table->foreign('${1:columnName}')->references('${2:columnName}')->on('${3:tableName}');
endsnippet

snippet db "DB Facade"
DB::table('${1:tableName}')
    ->$0
endsnippet

snippet from "Laravel from function from DB facade" i
from('${1:tableName}')
    ->$0
endsnippet

snippet unic "Laravel unic function from DB facade" i
select('${1:name}')
->$0
endsnippet

snippet select "Laravel DB facade set the columns to be selected" i
select('${1:query}')
->$0
endsnippet

snippet selectRaw "Laravel selectRaw function from DB facade" i
selectRaw('${1:query}', ${2:params})
->$0
endsnippet

snippet join "Eloquent join function" i
join('${1:table_name}', '${2:table_name.column}', '${3:clause}', '${4:other_table_name.column}')
->$0
endsnippet

snippet where "Laravel where function from DB facade" i
where('${1:column}', '${2:comparison}', '${3:value}')
->$0
endsnippet

snippet whereIn "Laravel whereIn function from DB facade" i
whereIn('${1:column}', ${2:values})
->$0
endsnippet

snippet whereRaw "Laravel whereRaw function from DB facade"
whereRaw(${1:clause}, ${2:params})
->$0
endsnippet

snippet groupBy "Laravel groupBy function from DB facade" i
groupBy('${1:column}')
->$0
endsnippet

snippet first "Laravel 'first()' function from DB facade retries a single row from a table"
first();
endsnippet

snippet value "Function 'value()' from Laravel DB facade retrieves a single row / column from a table"
value('${0:cloumn}');
endsnippet

snippet pluck "Function 'pluck()' from Laravel DB facade retrieves a list of column values" i
pluck(${1:'title'});
endsnippet

snippet pluckn "Function 'pluck()' from Laravel DB facade retrieves a list of column values" i
pluck(${1:'title'}, ${0:'name'});
endsnippet

snippet chunck "Function 'chunck()' from Laravel DB facade chunk results" i
chunk(${1:size}, function (${2:params}) {
    $0;
});
endsnippet

snippet count "Function 'count()' from Laravel DB facade retrieve the 'count' result of the query" i
count();
endsnippet

snippet max "Function 'max()' from Laravel DB facade retrieve the maximum value of a given column" i
max('${0:column}');
endsnippet

snippet min "Function 'min()' from Laravel DB facade retrieve the minimum value of a given column" i
min('${0:column}');
endsnippet

snippet avg "Function 'avg()' from Laravel DB facade retrieve the average of the values of a given column" i
avg('${0:column}');
endsnippet

snippet exists "Function 'exists()' from Laravel DB facade determine if any rows exist for the current query" i
exists();
endsnippet

snippet doesntExist "Function 'doesntExist()' from Laravel DB facade determine if no rows exist for the current query" i
doesntExist()
endsnippet

snippet get "Laravel get function from DB facade" i
get()
endsnippet

snippet sqlWithBindings "Get SQL with bindings from Laravel query builder"
$sqlWithBindings = str_replace_array('?', $query->getBindings(), $query->toSql());
dd('SQL with bindings: ', $sqlWithBindings);
endsnippet

snippet transaction "Laravel Query Builder - Database transaction" i
DB::transaction(function () use ($${1:model}): void {
    ${0: # code...}
}${2:, 5});
endsnippet

snippet fillable "Eloquent fillable array"
protected $fillable = [
    ${0:# code...}
];
endsnippet

snippet with "Eloquent with array"
protected $with = [
    ${0:# code...}
];
endsnippet

snippet hidden "Eloquent hidden array"
protected $hidden = [
    ${0:# code...}
];
endsnippet

snippet casts "Eloquent casts array"
protected $casts = [
    ${0:# code...}
];
endsnippet

snippet appends "Eloquent appends array"
protected $appends = [
    ${0:# code...}
];
endsnippet

snippet scope "Eloquen scope function"
public function scope${1:Name}(Builder $query): ${2:Builder}
{
    return ${0:$query->};
}
endsnippet

snippet scope1 "Eloquen scope function with one param"
public function scope${1:Name}(Builder $query, ${2:TypeHint} $${3:param}): ${4:Builder}
{
    return ${0:$query->};
}
endsnippet

snippet scope2 "Eloquen scope function with two params"
public function scope${1:Name}(Builder $query, ${2:TypeHint} $${3:param2}, ${4:TypeHint} $${5:param2}): ${6:Builder}
{
    return ${0:$query->};
}
endsnippet

################################################################################
# Blade snippets                                                               #
################################################################################

snippet html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF8">
    <title>${1:Document}</title>
    <style>$2</style>
</head>
<body>
    $3
</body>
</html>
endsnippet

snippet @php
@php
    $0
@endphp
endsnippet

snippet @foreach
@foreach
    $0
@endforeach
endsnippet

################################################################################
# PHPUnit snippets                                                             #
################################################################################

snippet setup "PHPUnit setup function"
public function setUp(): void
{
    parent::setUp();
}
endsnippet

snippet setUpBeforeClass "PHPUnit setUpBeforeClass function"
public static function setUpBeforeClass(): void
{
    parent::setUpBeforeClass();
}
endsnippet

snippet tearDown "PHPUnit tearDown function"
public function tearDown(): void
{
    parent::tearDown();
}
endsnippet

snippet testf "PHPUnit test function"
public function test${1:Case}(): ${2:void}
{
    ${0:# code...}
}
endsnippet
